import React from 'react';
import { WagmiProvider } from 'wagmi';
import { baseSepolia, sepolia } from 'wagmi/chains';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { WagmiAdapter } from '@reown/appkit-adapter-wagmi';
import { createAppKit } from '@reown/appkit/react';
import type { Chain } from 'viem';

// 1. Get projectId from https://cloud.walletconnect.com
if (!import.meta.env.VITE_WALLETCONNECT_PROJECT_ID) {
    throw new Error('VITE_WALLETCONNECT_PROJECT_ID is not set')
}
const projectId = import.meta.env.VITE_WALLETCONNECT_PROJECT_ID;

// Define metadata for WalletConnect modal
const metadata = {
  name: 'Cabac Swap',
  description: 'A simple and efficient token swap application.',
  url: window.location.origin,
  icons: ['https://avatars.githubusercontent.com/u/37784886']
}

// Define supported networks
const networks: [Chain, ...Chain[]] = [sepolia, baseSepolia];

// Create the Wagmi adapter instance for Reown AppKit
// This connects AppKit's UI to wagmi's core logic
const wagmiAdapter = new WagmiAdapter({
  projectId,
  networks,
});

// Get the Wagmi config generated by the adapter
const config = wagmiAdapter.wagmiConfig;

// Initialize AppKit globally. This registers the <appkit-button /> web component.
createAppKit({
  adapters: [wagmiAdapter],
  projectId,
  networks,
  metadata,
  defaultNetwork: baseSepolia,
});

// Create a QueryClient for react-query
const queryClient = new QueryClient();

// Create the main AppProviders component
export const AppProviders: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  return (
    <WagmiProvider config={config}>
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    </WagmiProvider>
  );
};
